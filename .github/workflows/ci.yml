name: CI
on: [ push ]
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ONE_FRAME_TOKEN: ${{ secrets.ONE_FRAME_TOKEN }}
    defaults:
      run:
        working-directory: forex-mtl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up SBT
        uses: sbt/setup-sbt@v1
        with:
          sbt-runner-version: 1.8.0

      - name: Cache sbt and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.cache/coursier
          key: sbt-${{ runner.os }}-${{ hashFiles('**/*.sbt', '**/build.properties') }}
          restore-keys: sbt-${{ runner.os }}-

      - name: Format check & compile
        run: sbt scalafmtCheckAll compile
      
      - name: Unit tests with coverage
        run: sbt clean coverage test coverageReport

      - name: Generate HTML coverage report
        run: sbt coverageAggregate

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: forex-mtl/target/scala-2.13/scoverage-report/
          retention-days: 30

      - name: Generate coverage summary
        run: |
          echo "## ðŸ“Š Coverage Report Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Files Available:" >> $GITHUB_STEP_SUMMARY
          ls -la forex-mtl/target/scala-2.13/scoverage-report/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“‹ **Download Coverage Report:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Actions tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Download 'coverage-report' artifact" >> $GITHUB_STEP_SUMMARY
          echo "4. Open `index.html` in your browser" >> $GITHUB_STEP_SUMMARY

  acceptance-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      ONE_FRAME_TOKEN: ${{ secrets.ONE_FRAME_TOKEN }}
      APP_BASE_URL: http://localhost:8080
    defaults:
      run:
        working-directory: forex-mtl

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up SBT
        uses: sbt/setup-sbt@v1
        with:
          sbt-runner-version: 1.8.0

      - name: Cache sbt and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.cache/coursier
          key: sbt-${{ runner.os }}-${{ hashFiles('**/*.sbt', '**/build.properties') }}
          restore-keys: sbt-${{ runner.os }}-

      - name: Start OneFrame (docker-compose)
        run: docker compose -f docker-compose.acceptance.yml up -d

      - name: Start app server (background)
        run: nohup bash -lc "sbt -batch run" > app.log 2>&1 &

      - name: Wait for /health
        run: |
          for i in {1..60}; do
            if curl -fsS "$APP_BASE_URL/health" >/dev/null; then
              echo "App is up"; exit 0
            fi
            sleep 2
          done
          echo "App did not become healthy in time"
          exit 1

      - name: Acceptance tests with coverage
        run: sbt acceptance:test coverageReport

      - name: Upload acceptance coverage report
        uses: actions/upload-artifact@v3
        with:
          name: acceptance-coverage-report
          path: forex-mtl/target/scala-2.13/scoverage-report/
          retention-days: 30

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.acceptance.yml down
  